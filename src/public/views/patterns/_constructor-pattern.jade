div.panel.panel-success
  div.panel-heading
    h3.panel-title The Constructor Pattern
  div.panel-body
    h4 common ways to create new objects:
    pre
      | var obj = {};
      | ---
      | var obj = Object.create( myObj.prototype );
      | ---
      | var obj = new ConstructorFn();
    hr
    h4 common ways to get/set object's properties:
    pre
      | // using dot notation
      | var obj = {};
      | obj.myProp = "Hello World!";
      | var val    = obj.myProp;
      | ---
      | // using bracket notation
      | var obj = {};
      | obj["myProp"] = "Hello World!";
      | var val       = obj["myProp"];
      | ---
      | var obj = {};
      | Object.defineProperty( obj, "myProp", {
      |   value: "Hello World!",
      |   writable: true,
      |   enumerable: true,
      |   configurable: true
      | });
      | var val = obj.myProp; ( or ) var val = obj["myProp"];
      | ---
      | var obj = {};
      | Object.defineProperties( obj, {
      |   "myProp01": {
      |     value: "Hello World 01!",
      |     writable: true,
      |     enumerable: true,
      |     configurable: true
      |   },
      |   "myProp02": {
      |     value: "Hello World 02!",
      |     writable: true,
      |     enumerable: true,
      |     configurable: false
      |   }
      | });
      | var val01 = obj.myProp01; ( or ) var val01 = obj["myProp01"];
      | var val02 = obj.myProp02; ( or ) var val02 = obj["myProp02"];
    h4 Constructors
    P Functions called by prefixing <code>new</code> operator act as constructor function in JS.
    pre
      | // constructor function 'Car'
      | function Car(model, year) {
      |   this.model      = model;
      |   this.year       = year;
      |   this.toString   = function() {
      |     return this.model + " invented in year " + this.year;
      |   }
      | }
      | Car.prototype.classification = "four-wheeler";
      | Car.prototype.getModel = function() {
      |   return this.model;
      | };
      | // creating instance of 'Car'
      | var civic = new Car('Honda Civic', 2009);
      | // call instance's toString method
      | console.log( civic.toString() );
    p
      | The instance object has instance properties and prototype properties
      br
      | Instance properties are those that are attached to 'this'; instance properties are not shared among the object's instances
      br
      | Prototype properties are those that are attached to the constructor function's 'prototype' chain, making them shared across instances



