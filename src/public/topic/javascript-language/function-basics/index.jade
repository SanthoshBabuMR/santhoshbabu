extends ../../../template/_default-layout.jade

block title
  title Function basics

block content
  div.container
    include ../../../template/_navigation.jade
    div.article-navigator
      span.prev
        a(href="/javascript-language/javascript-introduction/", title="previous article") JavaScript Introduction

    section.page-navigation
      ul.list
        li
          <a href="#bmFunction">Functions</a>
        li
          <a href="#bmFunctionDeclaration">Function declaration signature</a>
        li
          <a href="#bmFunctionLiteral">Function literal signature</a>
        li
          <a href="#bmThis">this</a>
        li
          <a href="#bmArguments">arguments</a>
        li
          <a href="#bmHoisting">hoisting</a>

    section.page-content
      h1.page-title Function basics
      include ../_breadcrumb.jade
      section.batch
        article.group
          h3.group-title#bmFunction
            | Functions
          div.group-content
            div.group-main
              | a block of code designed to perform a particular task;
            ul.list
              li
                | functions can be created using 'function declaration' or 'function literal'

        article.group
          h3.group-title#bmFunctionDeclaration
            | Function declaration signature
          div.group-content
            pre
              | function &lt;function_name&gt;( &lt;param 1&gt;, .. &lt;param n&gt;) {
              |   // function body
              | }
            ul.list
              li
                | '&lt;function_name&gt;' is optional, in which case the function becomes anonymous and there would be no way to refer to that function.

        article.group
          h3.group-title#bmFunctionLiteral
            | Function literal signature
          div.group-content
            pre
              | var &lt;fn_name&gt; = function '&lt;function_name&gt;'( &lt;param 1&gt;, .. &lt;param n&gt;) {
              |   // function body
              | }
            ul.list
              li
                | '&lt;function_name&gt;' is  optional, in which the function becomes anonymous; However, the anonymous function can be referenced using '&lt;fn_name&gt;' variable.

        article.group
          h3.group-title#bmThis
            | this
          div.group-content
            div.group-main
              | 'this' keyword within a function refers to the object it was called with.
            ul.list
              li
                | Prior to ES6, 'this' within a function points to <code>window</code> object
                pre
                  | function foo(){
                  |   console.log(this); // window object
                  | };
                  | foo();
              li
                | In ES6, 'this' within a function refers to undefined
                pre
                  | function foo(){
                  |   'use strict';
                  |   console.log(this); // undefined
                  | };
                  | foo();

        article.group
          h3.group-title#bmArguments
            | arguments
          div.group-content
            div.group-main
              | 'arguments' is a reserved keyword in javascript, which references the actual arguments passed to the function during call
            ul.list
              li
                | 'arguments' behaves like an array, enabling access to a function's argument using index-based approach.
              li
                | Using 'arguments' keyword, access the first argument as 'arguments[0]', second argument as 'arguments[1]' and so on.
                pre
                  | function foo(a, b){
                  |   'use strict';
                  |   console.log("a : " + a);  // a : undefined
                  |   console.log("b : " + b);  // b : undefined
                  |   console.log(arguments);   // []
                  | };
                  | foo(); // calling foo with no arguments
                pre
                  | function foo(a, b){
                  |   'use strict';
                  |   console.log(a === arguments[0]);  // true
                  |   console.log(b === arguments[1]);  // true
                  |   console.log(arguments);           // [5, Object, 15]
                  | };
                  | foo(5, { even: [2,4,6] }, 15); // calling foo with arguments

        article.group
          h3.group-title#bmHoisting
            | hoisting
          div.group-content
            div.group-main
              | variables declared using 'var' are hoisted to the top of the function during function call
            ul.list
              li
                | function declaration gets hoisted, while functiona literal don't
                pre
                  | function fn(){
                  |   'use strict';
                  |   try {
                  |     foo(); // foo called
                  |     bar(); // TypeError: bar is not a function(â€¦)
                  |   } catch(e) {
                  |       console.log(e);
                  |   }
                  |   function foo() {
                  |     console.log("foo called");
                  |   };
                  |   var bar = function() {
                  |     console.log("foo called");
                  |   };
                  | };
                  | fn();

    div.article-navigator
      span.prev
        a(href="/javascript-language/javascript-introduction/", title="previous article") JavaScript Introduction
