dl.query-list.border.ordered
  dt
    | Create a new GIT repo
  dd
    div.demo
      p
        | <code class="mark">git init</code>
      p
        | <span class="example">Example #01:</span>
      div.code-block
        pre
          code.hljs.bash
            | git init
      p
        | This creates '.git' subdirectory which contains the Git repo's metadata.
        | This command can be used to create a new local Git repo or convert an existing, unversioned project a Git repository

dl.query-list.border.ordered
  dt
    | Cloning a existing repo
  dd
    div.demo
      p
        | <code class="mark">git clone &lt;repo&gt;</code>
      p
        | <span class="example">Example #01:</span>
      div.code-block
        pre
          code.hljs.bash
            | git clone https://github.com/jquery/jquery.git
      p
        | This clones jquery repo from source repo to local directory

  dd
    div.demo
      p
        | <code class="mark">git clone &lt;repo&gt; &lt;directory&gt;</code> 
      p
        | <span class="example">Example #02:</span>
      div.code-block
        pre
          code.hljs.bash
            | git clone https://github.com/jquery/jquery.git my-folder
      p
        | This clones jquery repo from source repo to 'my-folder' directory

dl.query-list.border.ordered
  dt
    | List local branches
  dd
    div.demo
      p
        | <code class="mark">git branch</code>
      p
        | <span class="example">Example #01:</span>
      div.code-block
        pre
          code.hljs.bash
            | git branch
      p
        | This will list all of the local branches in repository. The current branch you are in, is indicated by an asterisk mark.

dl.query-list.border.ordered
  dt
    | List remote branches
  dd
    div.demo
      p
        | <code class="mark">git branch -r</code>
      p
        | <span class="example">Example #01:</span>
      div.code-block
        pre
          code.hljs.bash
            | git branch -r
      p
        | This will list all of the remote branches.
  

dl.query-list.border.ordered
  dt
    | Create a new branch
  dd
    div.demo
      p
        | <code class="mark">git branch &lt;new_branch_name&gt;</code>
      p
        | <span class="example">Example #02:</span>
      div.code-block
        pre
          code.hljs.bash
            | git branch experimenting-on-layout
      p
        | This will Create a new branch called 'experimenting-on-layout'. This does not check out the new branch.

dl.query-list.border.ordered
  dt
    | Delete a local branch
  dd
    div.demo
      p
        | <code class="mark">git branch -d &lt;existing_branch_name&gt;</code>
      p
        | <span class="example">Example #03:</span>
      div.code-block
        pre
          code.hljs.bash
            | git branch -d experimenting-on-layout
      p
        | This will delete 'experimenting-on-layout' branch. However, delete is aborted in case of unmerged changes.
  dd
    div.demo
      p
        | <code class="mark">git branch -D &lt;existing_branch_name&gt;</code>
      p
        | <span class="example">Example #03:</span>
      div.code-block
        pre
          code.hljs.bash
            | git branch -D experimenting-on-layout
      p
        | This will force delete 'experimenting-on-layout' branch even if there are unmerged changes.
  
dl.query-list.border.ordered
  dt
    | Delete a remote branch
  dd
    div.demo
      p
        | <code class="mark">git branch -rd &lt;existing_branch_name&gt;</code>
      p
        | <span class="example">Example #01:</span>
      div.code-block
        pre
          code.hljs.bash
            | git branch -rd experimenting-on-layout
      p
        | This will delete 'experimenting-on-layout' remote branch.


dl.query-list.border.ordered
  dt
    | Switch/Checkout to a different branch
  dd
    div.demo
      p
        | <code class="mark">git checkout &lt;existing_branch_name&gt;</code>
      p
        | <span class="example">Example #01:</span>
      div.code-block
        pre
          code.hljs.bash
            | git checkout experimenting-on-layout
      p
        | Checking out a branch updates the files in the working directory to match the version stored in that branch.
        | Check out the 'experimenting-on-layout' branch, which should have already been created with git branch.
  dd
    div.demo
      p
        | <code class="mark">git checkout -b &lt;new_branch_name&gt;</code>
      p
        | <span class="example">Example #01:</span>
      div.code-block
        pre
          code.hljs.bash
            | git checkout -b experimenting-on-css3-properties
      p
        | Create and check out 'experimenting-on-css3-properties'

dl.query-list.border.ordered
  dt
    | Merge changes from other branch
  dd
    div.demo
      p
        | <code class="mark">git merge &lt;branch_to_merge&gt;</code>
      p
        | <span class="example">Example #01:</span>
      div.code-block
        pre
          code.hljs.bash
            | git merge experimenting-on-layout
      p
        | This merges 'experimenting-on-layout' branch in the current branch you are in.
        | Once you are done with the merging, 'experimenting-on-layout' can now be deleted.

dl.query-list.border.ordered
  dt
    | Pull in the recent changes from repo
  dd
    | git pull
  dd
    div.demo
      p
        | <span class="syntax">Syntax #01:</span> <code class="mark">git pull</code> 
      p
        | <span class="example">Example #01:</span>
      div.code-block
        pre
          code.hljs.bash
            | git pull
      p
        | This fetch's the specified remote’s copy of the current branch and immediately merge it into the local copy.
  dd
    div.demo
      p
        | <span class="syntax">Syntax #02:</span> <code class="mark">git pull &lt;remote&gt; &lt;branch&gt;</code> 
      p
        | <span class="example">Example #02:</span>
      div.code-block
        pre
          code.hljs.bash
            | git pull origin master
      p
        | This fetch's the specified remote’s copy of the 'master' branch and immediately merge it into the current local branch.
      div.code-block
        pre
          code.hljs.bash
            | git pull origin bugfix/header-overlap-issue
      p
        | This fetch's the specified remote’s copy of the 'bugfix/header-overlap-issue' branch and immediately merge it into the current local branch.

dl.query-list.border.ordered
  dt
    | View changes made in working directory
  dd
    div.demo
      p
        | <code class="mark">git diff &lt;path/to/file_name&gt;</code>
      p
        | <span class="example">Example #01:</span>
      div.code-block
        pre
          code.hljs.bash
            | git diff src/css/public.css
      p
        | This will output the changes made to 'public.css' file in working directory against the last committed version.

dl.query-list.border.ordered
  dt
    | View status of working directory and staging area
  dd
    div.demo
      p
        | <code class="mark">git status</code>
      p
        | <span class="example">Example #01:</span>
      div.code-block
        pre
          code.hljs.bash
            | git status
      p
        | This will list which files are staged, unstaged and untracked.

dl.query-list.border.ordered
  dt
    | Add files to staging area
  dd
    div.demo
      p
        | <code class="mark">git add &lt;path/to/file_01&gt; &lt;path/to/file_02&gt;</code>
      p
        | <span class="example">Example #01:</span>
      div.code-block
        pre
          code.hljs.bash
            | git add src/public/script/main.js src/public/view/index.html
      p
        | This will add 'main.js' and 'index.html' to staging area.
  dd
    div.demo
      p
        | <code class="mark">git add .</code>
      p
        | <span class="example">Example #02:</span>
      div.code-block
        pre
          code.hljs.bash
            | git add .
      p
        | This will add modified files in working directory to staging area
  dd
    div.demo
      p
        | <code class="mark">git add &lt;path/to/directory&gt;</code>
      p
        | <span class="example">Example #02:</span>
      div.code-block
        pre
          code.hljs.bash
            | git add src/public/script/vendor/
      p
        | This will add all modified files in 'vendor' directory to staging area

dl.query-list.border.ordered
  dt
    | Commit staged files
  dd
    div.demo
      p
        | <code class="mark">git commit -m &lt;commit_message&gt;</code>
      p
        | <span class="example">Example #01:</span>
      div.code-block
        pre
          code.hljs.bash
            | git commit -m "updated title in index.html"
      p
        | This will commit all files in staged area

dl.query-list.border.ordered
  dt
    | Push local  changes to remote repo
  dd
    div.demo
      p
        | <code class="mark">git push</code>
      p
        | <span class="example">Example #01:</span>
      div.code-block
        pre
          code.hljs.bash
            | git push
      p
        | Push all of your local changes to remote repo.

dl.query-list.border.ordered
  dt
    | Preserve local changes, but unstage files
  dd
    div.demo
      p
        | <code class="mark">git reset &lt;path/to/directory&gt;</code>
      p
        | <span class="example">Example #01:</span>
      div.code-block
        pre
          code.hljs.bash
            | git reset src/public/css/ src/public/images/
      p
        | Remove all staged file(s) in 'css', 'images' directory(s) from staging area, withouth reverting any local changes made.
  dd
    div.demo
      p
        | <code class="mark">git reset</code>
      p
        | <span class="example">Example #02:</span>
      div.code-block
        pre
          code.hljs.bash
            | git reset
      p
        | Remove all staged files from staging area, withouth reverting any local changes made.
  dd
    div.demo
      p
        | <code class="mark">git reset &lt;file_name&gt;</code>
      p
        | <span class="example">Example #01:</span>
      div.code-block
        pre
          code.hljs.bash
            | git reset src/public/script/index.js
      p
        | Remove 'index.js' staged file from staging area, withouth reverting any local changes made.

dl.query-list.border.ordered
  dt
    | Undo local changes and reset working directory to most recent commit
  dd
    div.demo
      p
        | <code class="mark">git reset --hard</code>
      p
        | <span class="example">Example #01:</span>
      div.code-block
        pre
          code.hljs.bash
            | git reset --hard
      p
        | Reset staging area and working directory to match most recent commit and overwrites all changes in the working directory.
        | Use with caution, as this removes all local changes.

dl.query-list.border.ordered
  dt
    | List all commits in the current branch
  dd
    div.demo
      p
        | <code class="mark">git log</code>
      p
        | <span class="example">Example #01:</span>
      div.code-block
        pre
          code.hljs.bash
            | git log
      p
        | list all commits
  dd
    div.demo
      p
        | <code class="mark">git log -n &lt;limit&gt;</code>
      p
        | <span class="example">Example #02:</span>
      div.code-block
        pre
          code.hljs.bash
            | git log -n 5
      p
        | show last 5 commits
  dd
    div.demo
      p
        | <code class="mark">git log --stat</code>
      p
        | <span class="example">Example #03:</span>
      div.code-block
        pre
          code.hljs.bash
            | git log --stat
      p
        | Include which files were altered and the relative number of lines that were added or deleted from each of them.
  dd
    div.demo
      p
        | <code class="mark">git log -p</code>
      p
        | <span class="example">Example #04:</span>
      div.code-block
        pre
          code.hljs.bash
            | git log -p
      p
        | Display the full diff of each commit.
  dd
    div.demo
      p
        | <code class="mark">git log --oneline</code>
      p
        | <span class="example">Example #05:</span>
      div.code-block
        pre
          code.hljs.bash
            | git log --oneline
      p
        | Condense each commit to a single line.
  dd
    div.demo
      p
        | <code class="mark">git log --author="&lt;pattern&gt;"</code>
      p
        | <span class="example">Example #06:</span>
      div.code-block
        pre
          code.hljs.bash
            | git log --author="Smith"
      p
        | Search for commits by a particular author.
  dd
    div.demo
      p
        | <code class="mark">git log -- &lt;path/to/file&gt;</code>
      p
        | <span class="example">Example #07:</span>
      div.code-block
        pre
          code.hljs.bash
            | git log -- src/public/css/public.css
      p
        | Only display commits that have the specified file.
  dd
    div.demo
      p
        | <code class="mark">git log --grep="&lt;pattern&gt;"</code>
      p
        | <span class="example">Example #08:</span>
      div.code-block
        pre
          code.hljs.bash
            | git log --grep="Smith"
      p
        | Search for commits by a particular author.
  dd
    div.demo
      p
        | <code class="mark">git log --grep="&lt;pattern&gt;"</code>
      p
        | <span class="example">Example #09:</span>
      div.code-block
        pre
          code.hljs.bash
            | git log --grep="added"
      p
        | Search for commits where the commit message has the word 'added'
  dd
    div.demo
      p
        | <span class="example">Example #10:</span>
      div.code-block
        pre
          code.hljs.bash
            | git log -n 3 --author="Smith" src/public/css/public.css
      p
        | list last 3 commits where author was "Smith" and the commit includes 'public.css' file

dl.query-list.border.ordered
  dt
    | Define Configuration 
  dd
    div.demo
      p
        | <code class="mark">git config --global user.name &lt;user_name&gt;</code>
      p
        | <span class="example">Example #01:</span>
      div.code-block
        pre
          code.hljs.bash
            | git config --global user.name "Tim Smith"
      p
        | set user name globally
  dd
    div.demo
      p
        | <code class="mark">git config user.name &lt;user_name&gt;</code>
      p
        | <span class="example">Example #02:</span>
      div.code-block
        pre
          code.hljs.bash
            | git config user.name "Tim Smith"
      p
        | set user name to the current repo
  dd
    div.demo
      p
        | <code class="mark">git config --global user.email &lt;user_email&gt;</code>
      p
        | <span class="example">Example #03:</span>
      div.code-block
        pre
          code.hljs.bash
            | git config --global user.email "tim.smith@gmail.com"
      p
        | set user email globally
  dd
    div.demo
      p
        | <code class="mark">git config user.email &lt;user_email&gt;</code>
      p
        | <span class="example">Example #04:</span>
      div.code-block
        pre
          code.hljs.bash
            | git config user.email "tim.smith@gmail.com"
      p
        | set user email to the current repo
  dd
    div.demo
      p
        | <code class="mark">git config --global --edit</code>
      p
        | <span class="example">Example #05:</span>
      div.code-block
        pre
          code.hljs.bash
            | git config --global --edit
      p
        | Open the global configuration file for manual editing.
  dd
    div.demo
      p
        | <code class="mark">git config --edit</code>
      p
        | <span class="example">Example #06:</span>
      div.code-block
        pre
          code.hljs.bash
            | git config --edit
      p
        | Open the local configuration file for manual editing.

h3
  | References
ul
  li
    a(href="https://www.atlassian.com/dms/wac/images/landing/git/atlassian_git_cheatsheet.pdf") Git Cheat Sheet - Atlassian
  li
    a(href="https://www.atlassian.com/git/tutorials/setting-up-a-repository") Setting up a repository
  li
    a(href="http://stackoverflow.com/questions/2257196/git-pull-from-other-branch") Git: Pull from other branch


