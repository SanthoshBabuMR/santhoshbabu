article
  h2.sub-heading
    | Terminology
  dl.query-list.border.ordered
    dt
      | HEAD
    dd
      | HEAD pointer is the reference to the last commit
  dl.query-list.border.ordered
    dt
      | Working Directory
    dd
      | A folder that contains an initialized Git repository
  dl.query-list.border.ordered
    dt
      | Tracked files
    dd
      | Existing file(s) in the working directory are tracked files.
  dl.query-list.border.ordered
    dt
      | Untracked files
    dd
      | New file(s) in the working directory are files with untracked status
  dl.query-list.border.ordered
    dt
      | Unmodified files
    dd
      | New file(s) added to the staging area are unmodified files
  dl.query-list.border.ordered
    dt
      | Modified files
    dd
      | Existing file(s) that are modified in the working directory, are file(s) with modified status.
      | <br />
      | Also, When a file moved to staging area and is later modified, the file is in modified status
  dl.query-list.border.ordered
    dt
      | .gitignore
    dd
      | contains files/folders that needs to be ignored during commit
  dl.query-list.border.ordered
    dt
      | git configuration ( System level )
    dd
      p
        | The system level contains system-wide configurations; if you edit the configuration at this level, every user and its repository will be affected.
        | <br />
        | This configuration is stored in the gitconfig file usually located in:
      ul
        li
          | Windows - C:\Program Files (x86)\Git\etc\gitconfig
        li
          | Linux - /etc/gitconfig
        li
          | Mac OS X - /usr/local/git/etc/gitconfig
      p
        | To edit the parameters at this level, you have to use the --system option;

  dl.query-list.border.ordered
    dt
      | git configuration ( Global level )
    dd
      p
        | The global level contains user-wide configurations; if you edit the configuration at this level, every user's repository will be affected.
        | <br />
        | This configuration is stored in the .gitconfig file usually located in:
      ul
        li
          | Windows - C:\Users\<UserName>\.gitconfig
        li
          | Linux - ~/.gitconfig
        li
          | Mac OS X - ~/.gitconfig
      p
        | To edit the parameters at this level, you have to use the --global option.
  
  dl.query-list.border.ordered
    dt
      | git configuration ( Repository level )
    dd
      p
        | The repository level contains repository only configurations; if you edit the configuration at this level, only the repository in use will be affected.
        | <br />
        | This configuration is stored in the config file located in the .git repository subfolder:
      ul
        li
          | Windows - C:\<MyRepoFolder>\.git\config
        li
          | Linux - ~/<MyRepoFolder>/.git/config
        li
          | Mac OS X - ~/<MyRepoFolder>/.git/config
      p
        | To edit parameters at this level, you can use the --local

article
  h2.sub-heading
    | References
  ul
    li
      a(href="https://www.packtpub.com/application-development/git-essentials") Git Essentials by Ferdinando Santacroce
    li
      a(href="https://www.atlassian.com/dms/wac/images/landing/git/atlassian_git_cheatsheet.pdf") Git Cheat Sheet - Atlassian
    li
      a(href="http://learngitbranching.js.org/") Learn Git Branching
    li
      a(href="http://nvie.com/posts/a-successful-git-branching-model/") A successful Git branching model
    li
      a(href="https://www.atlassian.com/git/tutorials/setting-up-a-repository") Setting up a repository
    li
      a(href="http://stackoverflow.com/questions/2257196/git-pull-from-other-branch") Git: Pull from other branch
    li
      a(href="http://stackoverflow.com/questions/3639342/whats-the-difference-between-git-reset-and-git-checkout") What's the difference between "git reset" and "git checkout"?
    li
      a(href="https://arialdomartini.wordpress.com/2012/09/03/pre-emptive-commit-comments/") Preemptive commit comments
    li
      a(href="http://www.commitlogsfromlastnight.com/") Commit Logs From Last Night
    li
      a(href="http://www.gitminutes.com/") Git Minutes
